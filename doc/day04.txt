# day04

내장 객체
	==> 자주 사용하는 클래스 중 몇 가지는 JSP안에서 미리 new 시켜서
		사용할 수 있도록 준비해 놓은 것이 있ㄷr.
		따라서 이것은 new 시킬 필요없이 사용할 수 있는 클래스를
		내.장.객.체라고 부른다. ( 이미 메모리 올려져 있다 )

		1. out 객체
			PrintWriter 클래스를 미리 new 시켜놓은 내장 객체이다.
			(타켓스트림 내부적으로 만들어서 씀, 버퍼기능 구현 포함)
			
			즉,
				PrintWriter out = new PrintWriter(xxxx);
			
			이 클래스의 역할은 클라이언트에게 응답하는 문서를 작성하도록 하는 기능이다.
			<%= %> 과 동일한 기능이다.
			
			주요함수
				write()
				flush()
				
			PrintWriter 는 JSPWriter 클래스로 변환되어서 new 된 경우이다.
			
			JSP -> java.class -> (out) -> 출력
			
		참고 ]
			내장객체는 결국 클래스를 사용하는 것이다.
			해당 클래스 안에 원하는 함수가 무엇인지를 파악하는 것이 중요하다,
			
			
		*	
		2. request 객체
			==> 클라이언트의 요청 정볼르 관리하는 역할을 하는 내장객체
				즉, 요청한 클라이언트의 IP주소, 요청 내용, 부가정보를
				알고 싶은 경우에 사용하는 내장객체이다.
				
				HttpServletRequest를 이용해서 만들어진 내장객체이다.
				
				주요함수 ]
					getParameter()
					==> 서버 측에서 클라이언트가 준 부가정보를 알아내는 함수
					
						형식 ]
							
							String 변수 = request.getParameter(키값);
						
						주의 ]
							
							부가정보는 오직 문자열(String) 형태로 꺼내올 수 있다
							
							
					getParameterValues()
					==> 서버 측에서 클라이언트가 준 같은 키값으로 전달한
						부가정보들을 모두 알아내는 함수	
					
						형식 ]
							
							String[] 변수 = request.getParameterValues("키값");
							
						예 ]
							
							체크박스의 경우
							<input type="checkbox" name="chk" value="val1">
							<input type="checkbox" name="chk" value="val2">
							<input type="checkbox" name="chk" value="val3">
							<input type="checkbox" name="chk" value="val4">
							<input type="checkbox" name="chk" value="val5">
							
							==> ?chk=val1&chk=val2&chk=val3& ...
							name이 같네! 한번에 배열로 꺼냄	
					
					setAttribute("키값", 데이터)
					==> request 객체에 속성을 추가하는 기능
					getAttribute("키값")
					==> request 객체의 속성값을 꺼내는 함수
					
			중요 ]
				parameter의 경우는 데이터를 꺼내는 함수만 존재한다.
				attribute의 경우는 데이터를 입력하는 함수, 꺼내는 함수 모두 존재한다.
					
------------------------------------------------------------------------------------
클라이언트가 서버에게 요청하는 방법			

	1. GET
		1) 브라우저의 주소 입력란에 직접 입력해서 요청하는 방법
		2) <a> 태그를 사용해서 요청하는 방법
				<a href="주소">내용</a>
		3) 자바스크립트에서 location 객체의 href 속성으로 요청하는 방법
				location.href= '주소';
		4) <form> 태그의 method 속성값으로 입력해서 요청하는 방법
				<form method="GET" action="주소">
					<input> 태그들...
				</form>
				
		참고 ]
			get 방식으로 요청할 때 부가정보를 같이 줄 수 있다.		
			예를 들어 게시판 목록보기를 할 때
			몇 페이지를 보여주세요!라고 요청할 수 있다.
			
			형식 ]
				<a href="주소?키값=데이터&키값=데이터&키값=데이터&...">내용</a>
			주의 ]
				? = & 전 후에 공백이 있으면 절대로 안된다.
				
		참고 ]
			get 방식은 요청 내용이 주소입력란에 표시되기 때문에 보안에 취약한 문제점이 있다.
			
		주의 ]
			파라미터에 한글이 들어가면 서버측에서 받을 수 없는 경우가 발생한다.
			한글이 인코딩이 안되는 경우
			
			해결방법 ]
				1. 해당 문서에서만 해결하는 방법
					: 해당 문서 안에
					<%
						request.setCharacterEncoding("UTF-8");
					%> ( 쓸 일 없을 것...)
				
				2. 모든 문서에서 해결하는 방법
					: server.xml 파일안에
					
						<Connector> 태그의 마지막 부분에 
							URIEncoding="UTF-8"
						을 추가한다.
			
	2. POST
		1) form 태그를 이용해서 요청하는 방법
			==> 로그인 폼과 같이 사용자가 필요한 데이터를
				직접 입력 또는 선택해서 서버에게 전달하는 방식
			***
			특징  ]
				반드시 form 태그 안에 입력태그를 만들어야 한다.
				만약 입력태그가 form 태그안에 있지 않으면
				그 내용은 서버에 전달되지 않는다.
				
			***
			특징 ]
				서버에서는 전달되는 데이터를 받아야 하는데....
				이 때는 name 속성값이 파라미터의 키값으로 정해지므로
				거낼때는 name 속성값으로 꺼내야 한다.
				따라서 입력태그를 만들때는 반드시 name 속성을 기술해줘야 한다.

			참고 ]
				이 때 반드시 폼의 내용을 전달할 도구를 준비한다.
				이 도구를 우리는 전문용어로 submit(제출)도구라고 한다.
				
				제출 도구 만드는 방법
				
					1. html에서 만드는 방법
						<input type="submit" value="제출">
						==> 버튼모양으로 만들어지는 태그
							이 버튼을 클릭하면 입력태그에 입력된 내용이 서버에 제출됨
							
					2. 자바스크립트로 만드는 방법
						<script>
							var frm = 폼 태그 선택;
							frm.submit();
						</script>
					
					참고 ]
						form 태그의 중요속성
							1) method
								==> <form> 태그 내 입력태그의 내용을 서버에 보내는 방법 
									GET, POST중 선택한다.
							2) action
								==> 서버가 받아서 처리해야할 문서 이름
								
			참고 ]
				POST 방식은 스트림을 이용해서 서버에 전달하게 되므로
				주소입력란에 내용이 표현이 안 된다.
				따라서 GET 방식보다는 보안에 유리하다.
				
			참고 ]
				POST 방식으로 전송하는 데이터의 한글 깨짐을 방지하는 방법
				서버가 필터링을 이용해서 인코딩 해줘야 한다.
				
				방법 ]
					
					web.xml 파일을 열어서

					-필터를 만들고
					<filter>
						<filter-name>setCharaterEncodingFilter</filter-name>
							==> 정의하는 필터의 이름을 지정하는 부분
						<filter-class>org.apache.catalina.filters.setCharaterEncodingFilter</filter-class>
							==> 필터 처리에 사용할 클래스를 지정하는 부분
						<init-param>
							<param-name>encoding</param-name>
							<param-value>UTF-8</param-value>
						</init-param>
							==> 한글 인코딩 방식을 지정
					</filter>
					
					-필터를 적용한다
					<filter-mapping>
						<filter-name>setCharaterEncodingFilter</filter-name>
							==> 사용할 필터의 이름을 지정하는 부분
						<url-pattern>/*</url-pattern>
							==> 어떤 요청이 있는 경우 필터처리를 사용할지 등록하는 경우
								/* 는 모든 요청에 대해서 필터를 적용한다는 의미
					</filter-mapping>

			참고 ]
				입력태그 중 name 속성값이 같은 여러 개의 태그가 존재하면
				그 태그들의 데이터는 배열형태로 전달된다.
			참고 ]
				입력태그가 라디오버튼이거나 셀렉트박스인 경우에는
				선택 된 내용만 서버에 전달된다.
				 
------------------------------------------------------------------------------------
	3. response 객체
		==> 서버가 클라이언트에게 응답하는 정보를 관리하는 내장 객체
		
			HttpServletResponse 라는 클래스를 이용해서 만들어진 내장 객체
			
			주요함수
				sendRedirect()
				==> 서버측에서 강제로 클라이언트의 요청을 변경하는 명령
				
					즉, 클라이언트는 A를 요청했는데
					서버측에서 강제로 B로 응답하도록 하는 방법
		
				예를 들어 게시판 글쓰기를 요청한 경우
				글쓰기 작업이 끝나면 글쓰기 작업에 대한 응답을 하는 것이 아니고
				강제로 목록보기 페이지를 보여주는 것이 일반적인 작업이다.
				
				이때 목록보기는 하나의 요청에 해당이 된다.
		
				이처럼 서버는 가끔 클라이언트 요청을 서버 스스로
				다른 요청으로 바꿔야 할 경우가 있다.
		
------------------------------------------------------------------------------------
서버가 요청을 처리하는 방법
		
	1. sendRedirect
		==> 원래 클라이언트의 요청정보를 모두 지우고 완벽하게 새로운 요청을 보내는 방법
			따라서 원래 클라이언트가 준 정보는 모두 사라지게 된다.
			
			새로고침을 하면 마지막 요청(=리다이렉트한 요청)부터 시작한다.
			즉, 서버가 바꾼 요청부터 시작한다.
			
	2. forward
		==>	원래 클라이언트의 요청을 유지한 상태에서 화면에 보이는 문서만 바꾸는 방법
		
			따라서 원래 클라이언트가 준 정보는 기억하고 있는 상태가 된다.
		
			새로고침을 하면 처음(=클라이언트가 처음한 요청)부터 다시 시작한다.
			
------------------------------------------------------------------------------------
		
*
4. session
	==> 세션을 관리하는 내장 객체
	
		HttpSession 이라는 클래스를 이용해서 만들어진 내장 객체
	
5. application
	==> 서버 전체를 관리하는 내장 객체
		
		ServletContext 라는 클래스를 이용해서 만들어진 내장 객체

6. page
	==> 해당 문서 자체를 관리하는 내장객체
		
		PageContext 라는 클래스를 이용해서 만들어진 내장 객체

=====================================================================================

내장 객체의 영역
	==> 내장 객체를 이용하면 데이터를 보관하고 사용할 수 있다.
		즉, 서버 스스로가 필요한 데이터를 보관했다가 사용할 수 있게 된다.
		
		물론 자바에서 변수에 기억해 놓았다가 사용해도 되지만...
		--> 자바로 변수로 만들면
		거의 지역변수로 만들어진다. (서비스 내에서만 사용하는 기억변수가 되니까)
		
		같은 지역(문서)에서만 사용할 수 밖에 없는 문제점이 생긴다.
		
		좀 더 다양한 문서에서 데이터를 공유할 수 있는 기능을 제공하고 있다.
		
		그런데 문제는
			내장객체르 이용해서 데이터를 기억했는가에 따라서
			그 데이터를 사용할 영역이 달라진다.
			이때 이 영역을 "내장객체의 영역"라고 표현한다.
			
		예 ] 
			request.setAttribute();
			==> 이렇게 데이터를 기억시키면 요청이 유지되고 있는 동안에는 데이터를 사용할 수 있다.
				요청이 바뀌면 데이터는 사라지게 된다.
				
			session.setAttribute();
			==> 이렇게 세션에 기억시키면
				세션이 유지되는 동안에는 언제든지 데이터를 사용할 수 있게 된다.
				
	
	1) pageContext
		==> 같은 문서 안에서만 데이터를 사용할 수 있다.
			--> 이것은 거의 사용하지 않는다. 그냥 가져와서 기억시키면 되잖아.
				왜냐하면 변수를 만들어서 사용하는 것과 동일하기 때문에...

	2) request
		==> 같은 요청을 유지한 문서에서 그 데이터를 사용할 수 있다.
		
	*****
	3) session
		==> 세션이 유지되는 동안에는 문서에서 세션에 기억한 데이터를 사용할 수 있다.

	4) application
		==> 같은 서버를 사용하는 문서에서 서버에 기억된 데이터는 사용할 수 있다.
			웹서버는 각각의 클라이언트에 독립적으로 응답하는 것이 원칙이다.
			즉, 다른 클라이언트의 요청과 상관없이
			클라이언트가 요청한 문제점을 해결하는 것이 일반적이다.
			굳이 모든 문서에서 동일한 데이터를 사용할 일은
			거의 존재하지 않는다.
			
=====================================================================================

액션태그
==> JSP는 HTML 언어를 기반으로해서
	필요한 위치에 자바적인 요소를 스크립트 하는 방식으로 만들어지는 언어이다.
	따라서
	HTML은 태그를 중심으로 제작하고
	자바적인 요소는 <% %>를 이용해서 처리하므로 조금은 불편하다.
			
	자주 사용하는 자바의 기능을 HTML처럼(태그방식)
	사용할 수 있도록 만들어 놓은 보조적인 명령을 말한다.	
	
	1. forward 대신하는 액션 태그
	
		형식 1 ]
			<jsp:forward page="응답문서" />
			==> 단순히 보여줄 페이지만 변경하는 것
			
		형식 2 ]
			<jsp:forward page="응답문서"
				<jsp:param name="키값" value="데이터" scope="???" />
				...
			</jsp:forward>
			==> 보여줄 페이지를 변경하면서 부가정보(파라미터)를 알려준다.
			
			*
			참고 ]
				액션태그는 xhtml를 기반으로 제작된 태그
				몸체가 있는 태그 :
					<태그이름>
						내용
					</태그이름>
				몸체가 없는 태그 :
					<태그이름 />
	
	*		
	2. 다른 문서를 포함시키는 기능을 가진 액션 태그
		
		<%@ include file="???" %> 와 비슷한 역할을 하는 태그이다.
		
		형식 ]
			<jsp:include page="합칠문서" />
			
		주의 ]
			
			<%@ include fil="???" %> 은 먼저 합치고 클래스를 만든다.
			따라서 합쳐줄 때 충돌이 나지 않도록 주의해야 한다.
			
			<jsp:include page="???" />
			각각 클래스로 만들어서 실행한 후
			실행 결과만 합치게 된다.
			따라서 따로 컴파일되므로 충돌의 위험이 없다.
			
=====================================================================================
			
Servlet(서블릿)
==> JSP파일로 문서를 작성하더라도 자바 클래스로 변환되어서 실행되어진다.
	--> 이때 자바 클래스를 서블릿 클래스라고 한다.
	
	따라서 만약 우리가 서블릿 클래스를 직접 만들 수 있다면
	서버 입장에서는 JSP를 서블릿 클래스로 변환하는 작업을 줄일 수 있고
	결과적으로 처리 속도가 좀 더 향상 될 것이다.
	
	참고 ]
		web 페이지를 만드는 기술의 변천사
			
			Model 1
				==> JSP문서를 만들어서 처리하는 기술
			
			Model 2
				==> MVC 패턴을 이용해서 처리하는 기술
				M odel		: 데이터 자체 또는 데이터를 만드는 클래스	/ dao, sql, vo
				V iew		: JSP(인터페이스)파일 처럼 실제 보여지는 문서	/jsp
				C ontroller	: 요청을 처리하는 서블릿 클래스				/HttpServlet
	
	
------------------------------------------------------------------------------------
서블릿 클래스를 만드는 방법

1. HttpServlet 클래스를 상속 받아 클래스를 만든다.

2. 내부에 4가지 함수를 오버라이드한다.

	1) public void init() throws ServletException
		==> init(쩰~ 처음 실행하는 시쩜!!) 시점에서 실행되는 함수
			따라서 이 함수는 자바의 생성자 함수와 비슷한 역할을 하는 함수가 된다.
	2) public void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException
	3) public void doGet(httpServeletRequest req, HttpServletResponse resp) throws ServletException
		==> 모두 service 시점에서 실행되는 함수(응답해줘야 할 때 ㅇㅇ)
			따라서 실제로 클라이언트에게 응답하는 내용은 이 안에서 작성하면 된다.
			
			참고 ]
				doGet, doPost의 차이점은 클라이언트의 요청방식에 따라 다르다.
				Get 방식으로 요청한 경우는 doGet()가 실행되고,
				Post 방식으로 요청한 경우는 doPost()가 실행된다.
				
	4) public void destroy();
		==> destroy 시점에서 실행되는 함수 (요청 없앨 때!)
			따라서 이 부분에서는 그 클래스가 사용하던 자원을 제거하거나 거두는 목적으로 사용된다

3. 각각의 함수에 역할을 코딩한다.

	참고 ]
		서블릿의 생존 주기
			  init	- 서블릿 클래스가 가장 처음 만들어지는 시점
				|		(누군가 가장 처음 이 클래스를 요청한 경우 딱 한번만 실행된다)
				|		두번째입장? 실행x
			service	- 누군가 이 클래스를 요청한 시점
				|		(요청할 때 마다 계속해서 실행한다)
				|
			destroy	- 적당한 시간(서버가 지정한 시간)동안 요청이 전혀 없는 시점
						(적당한 시점이 되면 이 클래스는 없어져야 한다
							그 때 실행!
						따라서 주로 사용하던 자원을 반환해주는 목적으로 사용한다)

------------------------------------------------------------------------------------

만들어진 서블릿 클래스를 실행하는 방법
==> jsp 문서는 그 문서를 요청하면 실행되지만
	서블릿 클래스는 문서가 아니므로 원칙적으로 요청을 할 수 없다.
	*****
	따라서 서블릿 클래스가 실행되도록 요청 등록을 해줘야 한다.
	1. web.xml 파일에 요청을 등록
		1) 서블릿을 등록하고
		2) 서블릿을 매핑
	
	2. 서블릿 클래스에 요청 등록
		(servlet 모듈의 버전이 2.5 이상인 버전에서만 허락하는 방법
		1)	어노테이션을 이용해서 등록
			방법 ]
				만들어진 서블릿 클래스 윗 라인에
				@WebServlet("요청내용:)
				어노테이션을 이용해서 등록하면 된다.
	
	
			
	
			
			
	
		
		
		
		
		
		
		
		
		